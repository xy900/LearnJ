<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
default-lazy-init="true">

	<!-- 引用properties文件 -->
	<context:property-placeholder location="classpath:config/properties/*.properties"/>
	
	<!-- scan the package and the sub package -->
    <context:component-scan base-package="com.cms,com.aop">  <!-- 加载除表现层之外的所有bean -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- test 注入 -->
	<bean id="point" class="com.cms.component.TestPoint">
		<property name="id" value="111"/>
		<property name="name" value="${jdbc.username}"/>
	</bean>
	
	<!-- test spring加载时就初始化  -->
	<bean id="pointSpring" class="com.cms.component.TestPoint" lazy-init="false">
		<property name="id" value="222"/>
		<property name="name" value="222name"/>
	</bean>
	
	<!-- 开启aspectj代理   ( Spring默认不支持@AspectJ风格的切面声明,需要开启)-->
    <aop:aspectj-autoproxy />
	
	<!-- test AOP xml配置 -->
	<bean id="TestAop" class="com.aop.TestAop"></bean>
	<aop:config>  
		<!-- 声明切入点<aop:pointcut> -->
		<aop:pointcut id="pointCut" expression="execution(* com.cms.component..*.*(..))"/><!--切入点  该包及子包下的任何方法执行 --> 
	    <aop:aspect ref="TestAop"><!-- <aop:aspect>定义切面,可以定义多个  -->
	    	<aop:pointcut id="pointCut1" expression="execution(* com.cms.component..*.*(..))"/><!--切入点  该包及子包下的任何方法执行 --> 
	        <aop:before pointcut-ref="pointCut1" method="before"/><!-- 引用切入点 -->  
	        <aop:after pointcut="execution(* com.cms.component..*.*(..))" method="after"/><!-- 直接使用pointcut属性  (匿名切入点)-->
	        <!-- 通知采用pointcut-ref和 pointcut均可,   <aop:pointcut>(切入点)也可以不定义 -->
	    </aop:aspect>  
	</aop:config>  
	
	<!-- druid 数据库连接池 -->  
  	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >    
        <!-- 数据库基本信息配置 -->  
        <property name = "url" value = "${jdbc.url}" />    
        <property name = "username" value = "${jdbc.username}" />    
        <property name = "password" value = "${jdbc.password}" />    
        <property name = "driverClassName" value = "${jdbc.driverClassName}" />    
        <property name = "filters" value = "${jdbc.filters}" />    
        <!-- 最大并发连接数 -->  
        <property name = "maxActive" value = "${jdbc.maxActive}" />  
        <!-- 初始化连接数量 -->  
        <property name = "initialSize" value = "${jdbc.initialSize}" />  
        <!-- 配置获取连接等待超时的时间 -->  
        <property name = "maxWait" value = "${jdbc.maxWait}" />  
        <!-- 最小空闲连接数 -->  
        <property name = "minIdle" value = "${jdbc.minIdle}" />    
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name = "timeBetweenEvictionRunsMillis" value ="${jdbc.timeBetweenEvictionRunsMillis}" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name = "minEvictableIdleTimeMillis" value ="${jdbc.minEvictableIdleTimeMillis}" />    
        <property name = "validationQuery" value = "${jdbc.validationQuery}" />    
        <property name = "testWhileIdle" value = "${jdbc.testWhileIdle}" />    
        <property name = "testOnBorrow" value = "${jdbc.testOnBorrow}" />    
        <property name = "testOnReturn" value = "${jdbc.testOnReturn}" />    
        <property name = "maxOpenPreparedStatements" value ="${jdbc.maxOpenPreparedStatements}" />  
        <!-- 打开 removeAbandoned 功能 -->  
        <property name = "removeAbandoned" value = "${jdbc.removeAbandoned}" />  
        <!-- 1800 秒，也就是 30 分钟 -->  
        <property name = "removeAbandonedTimeout" value ="${jdbc.removeAbandonedTimeout}" />  
        <!-- 关闭 abanded 连接时输出错误日志 -->     
        <property name = "logAbandoned" value = "${jdbc.logAbandoned}" />  
    </bean>  
	
	<!-- 创建工厂 bean -->
	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource"/>
      <property name="mapperLocations" value="classpath:config/mapper/*.xml"/>
    </bean>
   
    <!-- 将sqlSessionTemplate手工注入到SqlSessionDaoSupport中 -->
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean> -->
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- tx标签配置事务, 不用@Transactional注解 -->
    <!-- 启用事务 需要处理 rollback -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="handle*" propagation="REQUIRED" />
			<tx:method name="cancel*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* com.cms.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config> -->
	<!-- end tx配置事务 -->
	
	<!-- 注解配置事务 需要在service实现类中加@Transactional注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- end 注解配置事务-->
	
	<context:annotation-config/>
	
	<!-- <bean id="applicationContextHelper" class="com.cms.utils.ApplicationContextHelper" lazy-init="false"></bean> 已经使用了@Lazy注解解决了此类无法实例化的问题-->
</beans>